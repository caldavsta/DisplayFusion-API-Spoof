using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
namespace BFS
{
    interface Window
    {
        static bool AddToWindowsTaskbar(IntPtr windowHandle);
        static string BuildWindowDebug(IntPtr windowHandle);
        static bool Close(IntPtr windowHandle);
        static bool DisableWindow(IntPtr windowHandle);
        static bool EnableWindow(IntPtr windowHandle);
        static bool Focus(IntPtr windowHandle);
        static IntPtr[] GetAllWindowHandles();
        static bool GetAlwaysOnTop(IntPtr windowHandle);
        static System.Drawing.Rectangle GetBounds(IntPtr windowHandle);
        static IntPtr GetChildWindowByClass(IntPtr windowHandleParent, string windowClass);
        static string GetClass(IntPtr windowHandle);
        static System.Drawing.Rectangle GetClientRect(IntPtr windowHandle);
        static IntPtr GetFocusedWindow();
        static IntPtr GetOwner(IntPtr windowHandle);
        static IntPtr GetParent(IntPtr windowHandle);
        static IntPtr GetParentRoot(IntPtr windowHandle);
        static string GetText(IntPtr windowHandle);
        static decimal GetTransparency(IntPtr windowHandle);
        static IntPtr[] GetVisibleAndMinimizedWindowHandles();
        static IntPtr[] GetVisibleWindowHandles();
        static IntPtr[] GetVisibleWindowHandlesByMonitor(uint monitorID);
        static IntPtr GetWindowByClass(string windowClass);
        static IntPtr GetWindowByText(string windowText);
        static IntPtr GetWindowByTextExact(string windowText);
        static IntPtr GetWindowProperty(IntPtr windowHandle, string propertyName);
        static IntPtr[] GetWindowsByText(string windowText);
        static IntPtr[] GetWindowsByTextExact(string windowText);
        static BFS.WindowEnum.WindowStyle GetWindowStyle(IntPtr windowHandle);
        static BFS.WindowEnum.WindowStyleEx GetWindowStyleEx(IntPtr windowHandle);
        static IntPtr GetWindowUnderMouse();
        static bool HasWindowStyle(BFS.WindowEnum.WindowStyle windowStyle, IntPtr windowHandle);
        static bool HasWindowStyleEx(BFS.WindowEnum.WindowStyleEx windowStyleEx, IntPtr windowHandle);
        static bool IsHung(IntPtr windowHandle);
        static bool IsMaximized(IntPtr windowHandle);
        static bool IsMinimized(IntPtr windowHandle);
        static bool IsRestored(IntPtr windowHandle);
        static bool IsVisible(IntPtr windowHandle);
        static bool IsWindowRolledUpToHat(IntPtr windowHandle);
        static bool IsWindowRolledUpToIcon(IntPtr windowHandle);
        static bool IsWindowRolledUpToTitleBar(IntPtr windowHandle);
        static bool Maximize(IntPtr windowHandle);
        static bool Minimize(IntPtr windowHandle);
        static bool MoveToBottomMonitorHalf(IntPtr windowHandle);
        static bool MoveToCentreMonitor(IntPtr windowHandle);
        static bool MoveToLeftMonitorHalf(IntPtr windowHandle);
        static bool MoveToMonitor(uint monitorID, IntPtr windowHandle);
        static bool MoveToMonitorMaximized(uint monitorID, IntPtr windowHandle);
        static bool MoveToMonitorResized(uint monitorID, IntPtr windowHandle);
        static bool MoveToNextMonitor(IntPtr windowHandle);
        static bool MoveToNextMonitorMaximized(IntPtr windowHandle);
        static bool MoveToNextMonitorResized(IntPtr windowHandle);
        static bool MoveToPreviousMonitor(IntPtr windowHandle);
        static bool MoveToPreviousMonitorMaximized(IntPtr windowHandle);
        static bool MoveToPreviousMonitorResized(IntPtr windowHandle);
        static bool MoveToRightMonitorHalf(IntPtr windowHandle);
        static bool MoveToTopMonitorHalf(IntPtr windowHandle);
        static bool RemoveFromWindowsTaskbar(IntPtr windowHandle);
        static bool RemoveWindowHighlight(IntPtr windowHandle);
        static bool RemoveWindowProperty(IntPtr windowHandle, string propertyName);
        static bool Restore(IntPtr windowHandle);
        static bool RollupWindowToHat(IntPtr windowHandle);
        static bool RollupWindowToIcon(IntPtr windowHandle);
        static bool RollupWindowToTitleBar(IntPtr windowHandle);
        static bool SetAlwaysOnTop(IntPtr windowHandle, bool alwaysOnTop);
        static bool SetLocation(IntPtr windowHandle, int x, int y);
        static bool SetOwner(IntPtr windowHandle, IntPtr windowHandleOwner);
        static bool SetSize(IntPtr windowHandle, int width, int height);
        static bool SetSizeAndLocation(IntPtr windowHandle, int x, int y, int width, int height);
        static bool SetText(IntPtr windowHandle, string text);
        static bool SetTransparency(IntPtr windowHandle, decimal transparencyPercent);
        static bool SetWindowHighlight(IntPtr windowHandle, Color colour);
        static bool SetWindowProperty(IntPtr windowHandle, string propertyName, IntPtr propertyValue);
        static bool SetWindowStyle(BFS.WindowEnum.WindowStyle windowStyle, IntPtr windowHandle);
        static bool SetWindowStyleEx(BFS.WindowEnum.WindowStyleEx windowStyleEx, IntPtr windowHandle);
        static bool ShowDesktop(IntPtr windowHandle);
        static bool ToggleAlwaysOnTop(IntPtr windowHandle);
        static bool UnrollWindowFromHat(IntPtr windowHandle);
        static bool UnrollWindowFromIcon(IntPtr windowHandle);
        static bool UnrollWindowFromTitleBar(IntPtr windowHandle);
    }
}
